# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DbcGenerator'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time
from unicodedata import decimal
import pylightxl as xl
import canmatrix
from General import *
import os
import canmatrix.formats.dbc as db_module
import sys


xlMtrixColData = \
{
    # row
    'dataStartRow': 2,

    # col
    'network': 1,
    'sendNode': 2,
    'frameName': 3,
    'signalName': 4,
    'comment': 5,
    'id': 6,
    'circle': 7,
    'order': 9,
    'signal_start_bit': 10,
    'signal_length': 11,
    'factor': 12,
    'offset': 13,
    'physicalMin': 14,
    'physicalMax': 15,
    'signalType': 16,
    'unit': 17,
    'initVal': 18,
    'recvNode': 21,
}

# get matrix info #input TODO
BASE_PATH = os.getcwd()
file_list = os.listdir(BASE_PATH)
excel_matrix = ''
for f in file_list:
    if f.endswith('xlsx'):
        excel_matrix = f

if excel_matrix == '':
    print(f'matrix excel file not find ! ')
    time.sleep(2)
    exit()

# input TODO
MATRIX_ABS_PATH = os.path.join(BASE_PATH, excel_matrix)
COM_SHEET_NAME = r'2_DF_Matrix'
demo_db = None

if os.path.exists(os.path.join(BASE_PATH, 'Demo.DBC')):
    demo_db = canmatrix.formats.loadp(os.path.join(BASE_PATH, 'Demo.DBC')).get("")
else:
    print("Demo dbc not exists !")
    time.sleep(2)
    exit()

print("Demo dbc  exists !")

# readxl returns a pylightxl database that holds all worksheets and its data
db = xl.readxl(fn=MATRIX_ABS_PATH)
comSheet = db.ws(ws=COM_SHEET_NAME)

dbc = canmatrix.CanMatrix()
# dbc.attributes = demo_db.attributes
# add basic dbc attribute
# GeneralAttributeAdd(dbc, "DF_M18_V1.0")

dbc.add_ecu(canmatrix.Ecu('FC'))
GeneralAttributeAdd(dbc, demo_db)

ecu_list = []
# add frame
frame = CreatCanFrame(dbc=dbc, comSheet=comSheet, is_fd=True, data_row=xlMtrixColData['dataStartRow'],
                      data_cfg=xlMtrixColData)

for row in range(2, comSheet.maxrow):

    try:
        id_str = str(comSheet.index(row=row, col=xlMtrixColData['id']))
        id = int(id_str, 16)
    except:
        print("row", row, "Message Id error !")
        while True:
            pass

    if id != frame.arbitration_id.id:
        # frame has been processed
        dbc.add_frame(frame)
        # new frame , is_fd TODO
        frame = CreatCanFrame(dbc=dbc, comSheet=comSheet, is_fd=True, data_row=row, data_cfg=xlMtrixColData)

    signal = CreateCanSignal(frame=frame, comSheet=comSheet, row=row, data_cfg=xlMtrixColData, ecu_list=ecu_list)

    frame.add_signal(signal)

# add all related ecu
for ecu in ecu_list:
    dbc.add_ecu(canmatrix.Ecu(ecu))

fileOut = open(os.path.splitext(excel_matrix)[0] + '.dbc', "wb")

# output dbc
# canmatrix.formats.dump(dbc, fileOut,"dbc", dbcExportEncoding='GBK')
db_module.dump(dbc, fileOut)

print('dbc generate ok!')


